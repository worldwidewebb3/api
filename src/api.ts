/* tslint:disable */
/* eslint-disable */
/**
 * Worldwide Webb Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PublicProfile
 */
export interface PublicProfile {
    /**
     * 
     * @type {string}
     * @memberof PublicProfile
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof PublicProfile
     */
    'displayName': string;
    /**
     * 
     * @type {number}
     * @memberof PublicProfile
     */
    'displayNameColor'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicProfile
     */
    'userType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicProfile
     */
    'isBanned': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicProfile
     */
    'isChatBanned': boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicProfile
     */
    'nftAvatarId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicProfile
     */
    'isGuest': boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches the public profile of a user based on their User ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetUserPublicProfile: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('authGetUserPublicProfile', 'userId', userId)
            const localVarPath = `/auth/users/{userId}/public`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a timestamp, needed for the signature validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTimestamp: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/auth/timestamp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikey required
            await setApiKeyToObject(localVarHeaderParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches the public profile of a user based on their User ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetUserPublicProfile(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetUserPublicProfile(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a timestamp, needed for the signature validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTimestamp(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTimestamp(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Fetches the public profile of a user based on their User ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetUserPublicProfile(userId: string, options?: any): AxiosPromise<PublicProfile> {
            return localVarFp.authGetUserPublicProfile(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a timestamp, needed for the signature validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTimestamp(options?: any): AxiosPromise<number> {
            return localVarFp.authTimestamp(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Fetches the public profile of a user based on their User ID
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetUserPublicProfile(userId: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetUserPublicProfile(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a timestamp, needed for the signature validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTimestamp(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authTimestamp(options).then((request) => request(this.axios, this.basePath));
    }
}


